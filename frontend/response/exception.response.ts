enum StatusCode {
    BADREQUEST = 400,
    UNAUTHORIZED = 401,
    FORBIDDEN = 403,
    NOTFOUND = 404,
    DUPLICATE = 409,
}

export enum ErrorMessage {
    DEFAULTERROR = 'Default error',
    AUTHNOHEADER = 'Error generated by auth middleware: Header not found.',
    AUTHWRONGHEADER = 'Error generated by auth middleware: Header malformed.',
    AUTHUNAUTHORIZED = 'Error generated by auth middleware: Token wrong or expired, unauthorized.',
    BADUSERNAMEREQ = 'Error generated by service: Username not follow the rule, please provide another username.',
    BADPASSWORDREQ = 'Error generated by service: Password not follow the rule, please provide another password.',
    WRONGUSERNAME = 'Error generated by service: User does not exist.',
    WRONGPASSWORD = 'Error generated by service: Password wrong, please check the password.',
    DUPLICATEUSER = 'Error generated by DB query: Username already exists, please change a username.',
    FORBIDDENUPDATEUSER = 'Error generated by role permission: No permission to update user profile.',
}


export default interface ApiException {
    status_code: StatusCode
    message: ErrorMessage
}

export function parseError(errorMessage){
    switch(errorMessage){
    case ErrorMessage.AUTHNOHEADER:
        return 'No auth header';
    case ErrorMessage.AUTHUNAUTHORIZED:
        return 'Unauthorized';
    case ErrorMessage.AUTHWRONGHEADER:
        return 'Wrong auth header';
    case ErrorMessage.BADPASSWORDREQ:
        return 'Bad password';
    case ErrorMessage.BADUSERNAMEREQ:
        return 'Bad username';
    case ErrorMessage.DEFAULTERROR:
        return 'Default error';
    case ErrorMessage.DUPLICATEUSER:
        return 'User already exists';
    case ErrorMessage.FORBIDDENUPDATEUSER:
        return 'No permission to operate';
    case ErrorMessage.WRONGPASSWORD:
        return 'Wrong password';
    case ErrorMessage.WRONGUSERNAME:
        return 'Wrong username';
    default:
        return '';
    }
    
}